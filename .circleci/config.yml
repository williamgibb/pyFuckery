# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

commands:
  test_steps_python:
    description: "Python test steps"
    steps:
        - checkout

        - restore_cache:
              keys:
                  - v1-venv-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "pyproject.toml" }}

        - run:
              name: setup venv
              command: |
                  python3 -m venv --copies venv
                  . venv/bin/activate
                  python3 -m pip install -U wheel pip pytest pytest-cov pycodestyle

        - run:
              name: install fuckery
              command: |
                  . venv/bin/activate
                  python3 -m pip install .

        - save_cache:
              paths:
                  - ./venv
              key: v1-venv-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "pyproject.toml" }}

        - run:
              name: syntax
              command: |
                  . venv/bin/activate
                  if [ -n "${RUN_SYNTAX}" ]; then pycodestyle --max-line-length=120 --select E111,E101,E201,E202,E203,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E303,E304,E502,E711,E712,E713,E714,E721,E741,E742,E743,W191,W291,W293,W292,W391,W602,W603 src/fuckery; fi;

        - run:
              name: run tests
              command: |
                  . venv/bin/activate
                  mkdir test-reports
                  circleci tests glob tests/test_*.py | circleci tests split --split-by=timings | xargs python -m pytest -v -s -rs --durations 6 --maxfail 6 -p no:logging --junitxml=test-reports/junit.xml ${COVERAGE_ARGS}

        - codecov/upload:
           file: /home/circleci/repo/coverage.xml
           upload_name: ${PYVERS}node${CIRCLE_NODE_INDEX}

        - store_test_results:
              path: test-reports

        - store_artifacts:
              path: test-reports

  docker_branch_build:
      description: do a branch docker build
      steps:
          - checkout
          - setup_remote_docker
          - run:
                name: build image
                command: |
                    docker build -t fuckery:dev -f Dockerfile .
          - run:
                name: docker login
                command: |
                    docker login --username "${DOCKER_USERNAME}" --password "${DOCKER_PASSWORD}"

          - run:
                name: tag and push container
                command: |
                    docker image tag fuckery:dev williamgibb/fuckery:${CIRCLE_BRANCH}
                    docker push williamgibb/fuckery:${CIRCLE_BRANCH}

jobs:

    python311:
        parallelism: 2
        docker:
            - image: cimg/python:3.11
              environment:
                  RUN_SYNTAX: 1
                  COVERAGE_ARGS: --cov fuckery --no-cov-on-fail --cov-report=xml
                  PYVERS: 3.11

        working_directory: ~/repo

        steps:
            - test_steps_python

    build_container_branch:
        docker:
            - image: docker:20.10.18
        steps:
            - docker_branch_build

    build_container_branch_optional:
        docker:
            - image: docker:20.10.18
        steps:
            - docker_branch_build

    build_container_tags:
        docker:
            - image: docker:20.10.18
        steps:
            - checkout
            - setup_remote_docker
            - run:
                  name: build image
                  command: |
                      docker build -t fuckery:dev -f Dockerfile .
            - run:
                  name: docker login
                  command: |
                      docker login --username "${DOCKER_USERNAME}" --password "${DOCKER_PASSWORD}"
            - run:
                  name: tag and push container
                  command: |
                      docker image tag fuckery:dev williamgibb/fuckery:${CIRCLE_TAG}
                      docker push williamgibb/fuckery:${CIRCLE_TAG}

    build_container_tags_07x:
        docker:
            - image: docker:20.10.18
        steps:
            - checkout
            - setup_remote_docker
            - run:
                  name: build image
                  command: |
                      docker build -t fuckery:dev -f Dockerfile .
            - run:
                  name: docker login
                  command: |
                      docker login --username "${DOCKER_USERNAME}" --password "${DOCKER_PASSWORD}"
            - run:
                  name: tag and push container
                  command: |
                      docker image tag fuckery:dev williamgibb/fuckery:v0.7.x
                      docker push williamgibb/fuckery:v0.7.x

    build_packages:
        environment:
            PYPI_SMOKE_CODE: import fuckery; print(fuckery.__version__)
        docker:
            - image: cimg/python:3.10
        steps:
            - checkout

            - restore_cache:
                  keys:
                      - v1-venv-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "pyproject.toml" }}

            - run:
                  name: install python dependencies
                  command: |
                      python3 -m venv venv
                      . venv/bin/activate
                      python3 -m pip install -U wheel pip twine build

            - save_cache:
                paths:
                    - ./venv
                key: v1-venv-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "pyproject.toml" }}

            - run:
                  name: verify git tag vs. version
                  command: |
                      env | grep -i circle
                      . venv/bin/activate
                      python scripts/verify_version.py
            - run:
                  name: init .pypirc
                  command: |
                      echo -e "[pypi]" >> ~/.pypirc
                      echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
                      echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
            - run:
                  name: create packages
                  command: |
                      . venv/bin/activate
                      python pyproject.toml sdist bdist_wheel

            - run:
                  name: smoke packages
                  command: |
                      mkdir -p /tmp/wheeltest
                      mkdir -p /tmp/sdisttest
                      python3 -m venv /tmp/wheeltest/venv
                      python3 -m venv /tmp/sdisttest/venv
                      cp dist/*.whl /tmp/wheeltest
                      cp dist/*.tar.gz /tmp/sdisttest
                      cd /tmp/wheeltest
                      . ./venv/bin/activate
                      python3 -m pip install -U wheel pip
                      python3 -m pip install *.whl
                      python3 -c "$PYPI_SMOKE_CODE"
                      deactivate
                      cd /tmp/sdisttest
                      . ./venv/bin/activate
                      python3 -m pip install -U wheel pip
                      python3 -m pip install *.tar.gz
                      python3 -c "$PYPI_SMOKE_CODE"
                      deactivate

            - run:
                  name: upload to pypi
                  command: |
                      . venv/bin/activate
                      twine upload dist/*

workflows:
    weekly:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ weekly, << pipeline.schedule.name >> ]
        jobs:
            - python311
    run_tests:
        when:
            not:
                equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        jobs:
            - python311:
                  filters:
                      tags:
                          only: /.*/
                      branches:
                          only: /.*/

            - build_packages:
                  context:
                      - PyPiFuckery
                  requires:
                      - python311
                  filters:
                      tags:
                          only: /^v0\.6\.[0-9.]+((a|b|rc)[0-9])?$/
                      branches:
                          ignore: /.*/

            - build_container_branch:
                  context:
                      - DockerCreds
                  requires:
                      - python311
                  filters:
                      branches:
                          only:
                              - master

            - docker_branch_hold:
                  type: approval
                  requires:
                      - python311
                  filters:
                      branches:
                          ignore:
                              - master

            - build_container_branch_optional:
                  context:
                      - DockerCreds
                  requires:
                      - docker_branch_hold

            - build_container_tags:
                  context:
                      - DockerCreds
                  requires:
                      - python311
                  filters:
                      tags:
                          only: /^v0\.6\.[0-9.]+((a|b|rc)[0-9])?$/
                      branches:
                          ignore: /.*/

            - build_container_tags_07x:
                  context:
                      - DockerCreds
                  requires:
                      - python311
                  filters:
                      tags:
                          only: /^v0\.6\.[0-9]+$/
                      branches:
                          ignore: /.*/
